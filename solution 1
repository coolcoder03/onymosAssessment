#include <iostream>
#include <vector>
#include <atomic>
#include <thread>
#include <random>

using namespace std;

// Order structure
// Represents a Buy or Sell order in the stock order book
struct Order {
    atomic<bool> active; // Tracks whether the order is active (lock-free approach)
    char type; // 'B' for Buy, 'S' for Sell
    int ticker; // Ticker symbol represented as an integer
    int quantity; // Quantity of stocks in the order
    int price; // Price of the order
    Order* next; // Pointer to the next order in the linked list

    Order(char t, int tk, int q, int p) : type(t), ticker(tk), quantity(q), price(p), next(nullptr) {
        active.store(true); // Mark order as active when created
    }
};

// Order book using a lock-free linked list
class OrderBook {
    atomic<Order*> head; // Atomic pointer to the head of the linked list

public:
    OrderBook() { head.store(nullptr); }
    
    // Adds a new order (Buy or Sell) to the order book
    // Time Complexity: O(1) - Inserts at the head of the linked list
    void addOrder(char type, int ticker, int quantity, int price) {
        Order* newOrder = new Order(type, ticker, quantity, price);
        Order* oldHead;
        do {
            oldHead = head.load();
            newOrder->next = oldHead;
        } while (!head.compare_exchange_weak(oldHead, newOrder)); // Lock-free insertion
    }

    // Matches buy and sell orders based on price criteria
    // Time Complexity: O(n) - Scans the order book for matches
    // Space Complexity: O(n) - Orders are stored in a linked list
    void matchOrder() {
        Order* prev = nullptr;
        Order* curr = head.load();
        while (curr) {
            if (!curr->active.load()) { // Skip inactive orders
                prev = curr;
                curr = curr->next;
                continue;
            }
            Order* temp = head.load();
            Order* bestMatch = nullptr;
            Order* bestMatchPrev = nullptr;

            // Find the best matching order (either lowest sell price or highest buy price)
            while (temp) {
                if (temp != curr && temp->active.load() && temp->ticker == curr->ticker &&
                    ((curr->type == 'B' && temp->type == 'S' && curr->price >= temp->price) ||
                     (curr->type == 'S' && temp->type == 'B' && temp->price >= curr->price))) {
                    if (!bestMatch || (curr->type == 'B' ? temp->price < bestMatch->price : temp->price > bestMatch->price)) {
                        bestMatch = temp;
                        bestMatchPrev = prev;
                    }
                }
                prev = temp;
                temp = temp->next;
            }
            // If a match is found, deactivate both orders
            if (bestMatch) {
                bestMatch->active.store(false);
                curr->active.store(false);
                cout << "Matched: " << (curr->type == 'B' ? "Buy" : "Sell") << " Order (" << curr->ticker << ") at Price: " << bestMatch->price << "\n";
            }
            prev = curr;
            curr = curr->next;
        }
    }
};

// Simulating stock transactions (Wrapper Function)
// Randomly generates Buy and Sell orders to test the order book
// Runs in multiple threads to simulate concurrent trading
void simulateTrading(OrderBook &orderBook) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> typeDist(0, 1);
    uniform_int_distribution<> tickerDist(0, 1023);
    uniform_int_distribution<> quantityDist(1, 100);
    uniform_int_distribution<> priceDist(10, 500);

    for (int i = 0; i < 100; i++) {
        char type = typeDist(gen) == 0 ? 'B' : 'S';
        int ticker = tickerDist(gen);
        int quantity = quantityDist(gen);
        int price = priceDist(gen);
        orderBook.addOrder(type, ticker, quantity, price);
    }
}

int main() {
    OrderBook orderBook;
    
    // Run stock transaction simulation in multiple threads
    thread t1(simulateTrading, ref(orderBook));
    thread t2(simulateTrading, ref(orderBook));

    t1.join();
    t2.join();

    // Match orders after transactions
    orderBook.matchOrder();
    return 0;
}
